worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Configuração do servidor para HTTP
    server {
        listen       80;
        server_name  efi.comnect.com.br;

        # Log de erros
        error_log logs/error.log;

        # Redireciona todas as requisições HTTP para HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Configuração do servidor para HTTPS com mTLS apenas na rota /webhook e /pix
    server {
        listen       443 ssl;
        server_name  efi.comnect.com.br;

        # Caminho dos certificados SSL
        ssl_certificate      C:/Nginx/certificados/fullchainEfi.pem;
        ssl_certificate_key  C:/Nginx/certificados/comnect_wildcard_2024.key;

        # Caminho do certificado de autoridade para validar o certificado do cliente (Efí)
        ssl_client_certificate C:/Nginx/certificados/certificate-chain-homolog.crt;

        # Não exige certificado SSL para o servidor, apenas para o webhook e pix
        ssl_verify_client optional;  # Certificado do cliente é opcional para todas as rotas

        # Cache e configurações de sessão SSL
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        # Ciphers modernos para SSL
        ssl_ciphers  TLS_AES_128_GCM_SHA256:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        # Rota /webhook - Requer certificado do cliente
        location /webhook {
            # Verifica se o certificado do cliente foi validado com sucesso
            if ($ssl_client_verify != SUCCESS) {
                return 403 "Certificado de cliente inválido.";
            }

            # Proxy para o Flask, garantindo que a requisição mTLS seja passada
            proxy_pass http://127.0.0.1:5000/webhook;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Rota /pix - Requer certificado do cliente
        location /pix {
            # Verifica se o certificado do cliente foi validado com sucesso
            if ($ssl_client_verify != SUCCESS) {
                return 403 "Certificado de cliente inválido.";
            }

            # Proxy para o Flask, garantindo que a requisição mTLS seja passada
            proxy_pass http://127.0.0.1:5000/pix;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Para outras rotas, não é exigido certificado SSL
        location / {
            proxy_pass http://127.0.0.1:5000;  # Flask rodando na porta 5000
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Página de erro personalizada para 500/502/503/504
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
